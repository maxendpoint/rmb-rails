
= rmb-rails: RESTful Message Beans for Ruby on Rails

== Introduction
Asynchronous messaging systems have been a staple component of enterprise architectures for several decades.  Proprietary products like IBM's MQSeries and Tibco's Rendevous have had great success in major enterprises like banks (MQ) and brokerage houses (Rendevous).  These systems were used primarily to knit together disparate computing 'silos' into a single fabric, and act primarily as integration tools.  The store-and-forward capability allowed enterprise architects to tie batch systems together or  to time-shift processing from one timezone to another, allowing global operations to proceed on a 24/7 basis.

Over time, these proprietary products are giving way to standard solutions like the Java Messaging Service, which has in turn encouraged compatible open source solutions like Apache's ActiveMQ.   The era of free, open source publish/subscribe systems, aka pub-sub, is upon us.  I think it behooves the Web 2.0 community to leverage this powerful technology to enable loose integration of disparate web applications.

=== Publishing is easy, Subscribing is hard
I have always been bemused by the fact that asynchronous messaging systems are so asymmetric.  It is relatively easy to enhance an 
existing program to publish messages about its state, but it is quite challenging to adapt an application to subscribe to a 
queue or topic, and then wait for messages to arrive.  This kind of behavior requires multi-threading, and most applications 
are written to be single-threaded.  So, publishing is easy, but subscribing is hard.

The Enterprise Java Beans developers came up with an elegant solution to this problem.  While Session and Entity Beans could not be 
configured to wait within the container for message arrival, that behavior could be delegated to the container.  This allows the 
multi-threaded EJB runtime, the container, to subscribe to brokers and, when a message arrives, create a Message Bean which 
then started a Session Bean (think of a rails controller) to instantiate one or more Entity Beans (think of rails models) 
to carry out the processing of the incoming message.  So I said to myself “self, where is the Ruby on Rails equivalent to 
the Message Bean?”, and I decided to build a gem that could provide that behavior.

There is a real parallel between a Java EJB application and a Ruby-on-Rails application, and the Rails environment needs a method 
to get incoming message broker subscriptions injected directly into the main Rails data stream.  Since the 'main Rails data stream' 
is listening for http requests, how can we convert an MQ message 
into an http request? The rubygem rmb-rails addresses this issue.

== Theory of Operation

I am not a fan of polling because I do not think that polling systems scale well, and can exhibit stability problems.  Therefore, I decided 
to create an infrastructure where daemon processes, called listeners, can connect to a specified message broker, receive messages from 
that broker, and then forward them on to a standard Rails controller using the REST protocol that is well supported by Rails.  
In other words, the daemon listener processes act as browsers doing a form of file upload.  The receiving rails controller is built on 
standard REST principles, and fits easily into any Rails application.

== Component classes

* module RMB
The rmb-rails gem is packaged within a single module, called RMB.  The component classes are described below.  See the rdoc for each class for a full description.
* class RMB::Properties
The primary interface between the gem and the calling rails app consists of a multilevel properties hash.  The hash is partially complete, 
but requires that several key/value pairs be supplied by the user.
* class RMB::ListenerClient
This class implements the interface between the calling application and the daemon listeners.
* class RMB::ListenerMain
This class, along with concrete Subscriber and Submitter subclasses, makes up the daemon listener process.
* class RMB::Subscriber
This is an abstract superclass for all Subscriber classes. Every daemon has an instance of a Subscriber class acting as the 'front end' 
of the daemon, listening and blocking on the broker.
* class RMB::Submitter
This is an abstract superclass for all Submitter classes.  Every daemon has an instance of a Submitter class acting as the 
forwarding agent, taking messages received by the subscriber, packaging the message as an http request, and posting it to the specified controller/action pair.
* class RMB::StompSubscriber
This is a concrete subclass of Subscriber, which uses the Stomp protocol to listen to an ActiveMQ message  broker.
* class RMB::MechanizeSubmitter
This is a concrete subclass of Submitter, which uses the WWW:Mechanize gem to package the message as a document and submit it to the controller.

== Installation
 
You will need an {ActiveMQ}[http://activemq.apache.org/] message broker to use this gem.  

 $ gem sources -a http://gems.github.com (you only have to do this once)

 $ sudo gem install explainer-rmb-rails

  or
  
 $ sudo gem install rmb-rails (to get the same gem from rubyforge)

== Usage

Add the following require statement to your code to get access to this gem:

 require 'rmb-rails'

Create an instance of RMB:ListenerClient to start/stop each listener daemon used.  Get the 
{RESTful-Message-Beans}[http://github.com/explainer/RESTful-Message-Beans/tree/master] rails app, which provides a complete 
demo rails application using this gem.  Look at the files lib/listener_daemon.rb and lib/listener_daemon_control.rb to understand how the
daemon itself is constructed and controlled.

== Credits
{ActiveMQ}[http://activemq.apache.org/] You can find the ActiveMQ message broker here.

{Enterprise Recipes with Ruby and Rails}[http://www.pragprog.com/titles/msenr/enterprise-recipes-with-ruby-and-rails] A special thanks to Maik Schmidt for this useful book.  Several of the recipes provided in the book formed the core of this work.

{Jeweler gem}[http://technicalpickles.github.com/jeweler/] Thanks to Josh Nichols for this useful tool, it makes building a gem fun.

== Copyright

Copyright (c) 2009 Ken Burgett. See LICENSE for details.
